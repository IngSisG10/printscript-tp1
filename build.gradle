plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.0.0' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '13.0.0' apply false
    id 'org.jetbrains.kotlinx.kover' version '0.8.3'
}

dependencies {
    kover(project(':common'))
    kover(project(':lexer'))
    kover(project(':parser'))
    kover(project(':interpreter'))
    kover(project(':linter'))
    kover(project(':formatter'))
    kover(project(':cli'))
}

allprojects {
    repositories { mavenCentral() }
    group = "com.ingsis.grupo10"
    version = "1.0.0-SNAPSHOT"
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlinx.kover'

    plugins.withId("maven-publish") {
        def env = new Properties()
        file(".env")?.withInputStream { env.load(it) }
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    groupId = project.group
                    artifactId = "printscript-${project.name}"
                    version = project.version
                }
            }
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/IngSisG10/printscript-tp1")
                    credentials {
                        username = env.getProperty("GITHUB_ACTOR")
                        password = env.getProperty("GITHUB_TOKEN")
                    }
                }
            }
        }
    }
}

def publishTargets = [
        project(':common'),
        project(':lexer'),
        project(':parser'),
        project(':interpreter'),
        project(":linter"),
        project(":formatter"),
        project(":cli")
]

configure(publishTargets) {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'maven-publish'

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
    }

    test {
        useJUnitPlatform()
    }

}

tasks.register("installGitHooks") {
    group = "setup"
    description = "Install git hooks"

    doLast {
        exec {
            commandLine("git", "config", "core.hooksPath", ".github/hooks")
        }
        println("Hooks configured via core.hooksPath")
    }
}

tasks.register('coverageAll') {
    group = 'verification'
    description = 'Run tests in subprojects and generate merged Kover reports'
    def modulesWithTest = rootProject.subprojects.findAll { it.tasks.findByName('test') != null }
    dependsOn modulesWithTest.collect { "${it.path}:test" }
    dependsOn ':koverXmlReport', ':koverHtmlReport'
}

kover {
    reports {
        verify {
            rule {
                minBound(80)
            }
        }
    }
}
